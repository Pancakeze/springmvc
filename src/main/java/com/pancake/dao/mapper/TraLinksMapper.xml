<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pancake.dao.TraLinksMapper" >
  <resultMap id="BaseResultMap" type="com.pancake.pojo.TraLinks" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="process_id" property="processId" jdbcType="BIGINT" />
    <result column="form_id" property="formId" jdbcType="BIGINT" />
    <result column="company_id" property="companyId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="code_rel" property="codeRel" jdbcType="INTEGER" />
    <result column="scan_mode" property="scanMode" jdbcType="INTEGER" />
    <result column="locations_status" property="locationsStatus" jdbcType="INTEGER" />
    <result column="create_user_id" property="createUserId" jdbcType="BIGINT" />
    <result column="create_user_name" property="createUserName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="CHAR" />
    <result column="update_user_id" property="updateUserId" jdbcType="BIGINT" />
    <result column="update_user_name" property="updateUserName" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="CHAR" />
    <result column="code_relation" property="codeRelation" jdbcType="INTEGER" />
    <result column="scan_model" property="scanModel" jdbcType="INTEGER" />
    <result column="radius" property="radius" jdbcType="DOUBLE" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="sub_code_num" property="subCodeNum" jdbcType="INTEGER" />
    <result column="customer_show_flag" property="customerShowFlag" jdbcType="INTEGER" />
    <result column="quality_id" property="qualityId" jdbcType="BIGINT" />
  </resultMap>

  <!--在mapper文件中的头部引入缓存策略-->
  <!--<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>-->

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, process_id, form_id, company_id, name, type, code_rel, scan_mode, locations_status, 
    create_user_id, create_user_name, create_time, update_user_id, update_user_name, 
    update_time, code_relation, scan_model, radius, remark, sub_code_num, customer_show_flag, 
    quality_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pancake.pojo.TraLinksExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tra_links
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from tra_links
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from tra_links
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.pancake.pojo.TraLinksExample" >
    delete from tra_links
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pancake.pojo.TraLinks" >
    insert into tra_links (id, process_id, form_id, 
      company_id, name, type, 
      code_rel, scan_mode, locations_status, 
      create_user_id, create_user_name, create_time, 
      update_user_id, update_user_name, update_time, 
      code_relation, scan_model, radius, 
      remark, sub_code_num, customer_show_flag, 
      quality_id)
    values (#{id,jdbcType=BIGINT}, #{processId,jdbcType=BIGINT}, #{formId,jdbcType=BIGINT}, 
      #{companyId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{codeRel,jdbcType=INTEGER}, #{scanMode,jdbcType=INTEGER}, #{locationsStatus,jdbcType=INTEGER}, 
      #{createUserId,jdbcType=BIGINT}, #{createUserName,jdbcType=VARCHAR}, #{createTime,jdbcType=CHAR}, 
      #{updateUserId,jdbcType=BIGINT}, #{updateUserName,jdbcType=VARCHAR}, #{updateTime,jdbcType=CHAR}, 
      #{codeRelation,jdbcType=INTEGER}, #{scanModel,jdbcType=INTEGER}, #{radius,jdbcType=DOUBLE}, 
      #{remark,jdbcType=VARCHAR}, #{subCodeNum,jdbcType=INTEGER}, #{customerShowFlag,jdbcType=INTEGER}, 
      #{qualityId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.pancake.pojo.TraLinks" >
    insert into tra_links
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="processId != null" >
        process_id,
      </if>
      <if test="formId != null" >
        form_id,
      </if>
      <if test="companyId != null" >
        company_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="codeRel != null" >
        code_rel,
      </if>
      <if test="scanMode != null" >
        scan_mode,
      </if>
      <if test="locationsStatus != null" >
        locations_status,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="createUserName != null" >
        create_user_name,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateUserId != null" >
        update_user_id,
      </if>
      <if test="updateUserName != null" >
        update_user_name,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="codeRelation != null" >
        code_relation,
      </if>
      <if test="scanModel != null" >
        scan_model,
      </if>
      <if test="radius != null" >
        radius,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="subCodeNum != null" >
        sub_code_num,
      </if>
      <if test="customerShowFlag != null" >
        customer_show_flag,
      </if>
      <if test="qualityId != null" >
        quality_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="processId != null" >
        #{processId,jdbcType=BIGINT},
      </if>
      <if test="formId != null" >
        #{formId,jdbcType=BIGINT},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="codeRel != null" >
        #{codeRel,jdbcType=INTEGER},
      </if>
      <if test="scanMode != null" >
        #{scanMode,jdbcType=INTEGER},
      </if>
      <if test="locationsStatus != null" >
        #{locationsStatus,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null" >
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createUserName != null" >
        #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=CHAR},
      </if>
      <if test="updateUserId != null" >
        #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateUserName != null" >
        #{updateUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=CHAR},
      </if>
      <if test="codeRelation != null" >
        #{codeRelation,jdbcType=INTEGER},
      </if>
      <if test="scanModel != null" >
        #{scanModel,jdbcType=INTEGER},
      </if>
      <if test="radius != null" >
        #{radius,jdbcType=DOUBLE},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="subCodeNum != null" >
        #{subCodeNum,jdbcType=INTEGER},
      </if>
      <if test="customerShowFlag != null" >
        #{customerShowFlag,jdbcType=INTEGER},
      </if>
      <if test="qualityId != null" >
        #{qualityId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pancake.pojo.TraLinksExample" resultType="java.lang.Integer" >
    select count(*) from tra_links
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tra_links
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.processId != null" >
        process_id = #{record.processId,jdbcType=BIGINT},
      </if>
      <if test="record.formId != null" >
        form_id = #{record.formId,jdbcType=BIGINT},
      </if>
      <if test="record.companyId != null" >
        company_id = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.codeRel != null" >
        code_rel = #{record.codeRel,jdbcType=INTEGER},
      </if>
      <if test="record.scanMode != null" >
        scan_mode = #{record.scanMode,jdbcType=INTEGER},
      </if>
      <if test="record.locationsStatus != null" >
        locations_status = #{record.locationsStatus,jdbcType=INTEGER},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=BIGINT},
      </if>
      <if test="record.createUserName != null" >
        create_user_name = #{record.createUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=CHAR},
      </if>
      <if test="record.updateUserId != null" >
        update_user_id = #{record.updateUserId,jdbcType=BIGINT},
      </if>
      <if test="record.updateUserName != null" >
        update_user_name = #{record.updateUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=CHAR},
      </if>
      <if test="record.codeRelation != null" >
        code_relation = #{record.codeRelation,jdbcType=INTEGER},
      </if>
      <if test="record.scanModel != null" >
        scan_model = #{record.scanModel,jdbcType=INTEGER},
      </if>
      <if test="record.radius != null" >
        radius = #{record.radius,jdbcType=DOUBLE},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.subCodeNum != null" >
        sub_code_num = #{record.subCodeNum,jdbcType=INTEGER},
      </if>
      <if test="record.customerShowFlag != null" >
        customer_show_flag = #{record.customerShowFlag,jdbcType=INTEGER},
      </if>
      <if test="record.qualityId != null" >
        quality_id = #{record.qualityId,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tra_links
    set id = #{record.id,jdbcType=BIGINT},
      process_id = #{record.processId,jdbcType=BIGINT},
      form_id = #{record.formId,jdbcType=BIGINT},
      company_id = #{record.companyId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      code_rel = #{record.codeRel,jdbcType=INTEGER},
      scan_mode = #{record.scanMode,jdbcType=INTEGER},
      locations_status = #{record.locationsStatus,jdbcType=INTEGER},
      create_user_id = #{record.createUserId,jdbcType=BIGINT},
      create_user_name = #{record.createUserName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=CHAR},
      update_user_id = #{record.updateUserId,jdbcType=BIGINT},
      update_user_name = #{record.updateUserName,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=CHAR},
      code_relation = #{record.codeRelation,jdbcType=INTEGER},
      scan_model = #{record.scanModel,jdbcType=INTEGER},
      radius = #{record.radius,jdbcType=DOUBLE},
      remark = #{record.remark,jdbcType=VARCHAR},
      sub_code_num = #{record.subCodeNum,jdbcType=INTEGER},
      customer_show_flag = #{record.customerShowFlag,jdbcType=INTEGER},
      quality_id = #{record.qualityId,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pancake.pojo.TraLinks" >
    update tra_links
    <set >
      <if test="processId != null" >
        process_id = #{processId,jdbcType=BIGINT},
      </if>
      <if test="formId != null" >
        form_id = #{formId,jdbcType=BIGINT},
      </if>
      <if test="companyId != null" >
        company_id = #{companyId,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="codeRel != null" >
        code_rel = #{codeRel,jdbcType=INTEGER},
      </if>
      <if test="scanMode != null" >
        scan_mode = #{scanMode,jdbcType=INTEGER},
      </if>
      <if test="locationsStatus != null" >
        locations_status = #{locationsStatus,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createUserName != null" >
        create_user_name = #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=CHAR},
      </if>
      <if test="updateUserId != null" >
        update_user_id = #{updateUserId,jdbcType=BIGINT},
      </if>
      <if test="updateUserName != null" >
        update_user_name = #{updateUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=CHAR},
      </if>
      <if test="codeRelation != null" >
        code_relation = #{codeRelation,jdbcType=INTEGER},
      </if>
      <if test="scanModel != null" >
        scan_model = #{scanModel,jdbcType=INTEGER},
      </if>
      <if test="radius != null" >
        radius = #{radius,jdbcType=DOUBLE},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="subCodeNum != null" >
        sub_code_num = #{subCodeNum,jdbcType=INTEGER},
      </if>
      <if test="customerShowFlag != null" >
        customer_show_flag = #{customerShowFlag,jdbcType=INTEGER},
      </if>
      <if test="qualityId != null" >
        quality_id = #{qualityId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pancake.pojo.TraLinks" >
    update tra_links
    set process_id = #{processId,jdbcType=BIGINT},
      form_id = #{formId,jdbcType=BIGINT},
      company_id = #{companyId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      code_rel = #{codeRel,jdbcType=INTEGER},
      scan_mode = #{scanMode,jdbcType=INTEGER},
      locations_status = #{locationsStatus,jdbcType=INTEGER},
      create_user_id = #{createUserId,jdbcType=BIGINT},
      create_user_name = #{createUserName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      update_user_id = #{updateUserId,jdbcType=BIGINT},
      update_user_name = #{updateUserName,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=CHAR},
      code_relation = #{codeRelation,jdbcType=INTEGER},
      scan_model = #{scanModel,jdbcType=INTEGER},
      radius = #{radius,jdbcType=DOUBLE},
      remark = #{remark,jdbcType=VARCHAR},
      sub_code_num = #{subCodeNum,jdbcType=INTEGER},
      customer_show_flag = #{customerShowFlag,jdbcType=INTEGER},
      quality_id = #{qualityId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>